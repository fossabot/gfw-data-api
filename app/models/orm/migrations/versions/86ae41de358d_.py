"""empty message

Revision ID: 86ae41de358d
Revises: 
Create Date: 2020-04-14 21:58:38.173605

"""
import json
import os

import boto3
import sqlalchemy as sa
import geoalchemy2

from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e47ec2fc3c51'
down_revision = None
branch_labels = None
depends_on = None

client = boto3.client("secretsmanager")
response = client.get_secret_value(SecretId=os.environ["SECRET_NAME"])
secrets = json.loads(response["SecretString"])

USERNAME = secrets["username"]
PASSWORD = secrets["password"]
DBNAME = secrets["dbname"]


def upgrade():

    #### Create read only user
    op.execute(f"""
                DO
                $do$
                BEGIN
                   IF NOT EXISTS (
                      SELECT                       -- SELECT list can stay empty for this
                      FROM   pg_catalog.pg_roles
                      WHERE  rolname = '{USERNAME}') THEN
                      CREATE ROLE {USERNAME} LOGIN PASSWORD '{PASSWORD}';
                   END IF;
                END
                $do$;
                """)
    op.execute(f"GRANT CONNECT ON DATABASE {DBNAME} TO {USERNAME};")
    op.execute(f"ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO {USERNAME};")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('datasets',
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('dataset', sa.String(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('dataset')
    )
    op.create_table('geostore',
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('gfw_geostore_id', postgresql.UUID(), nullable=False),
    sa.Column('gfw_area__ha', sa.Numeric(), nullable=False),
    sa.Column('gfw_bbox', geoalchemy2.types.Geometry(geometry_type='POLYGON', srid=4326), nullable=False),
    sa.PrimaryKeyConstraint('gfw_geostore_id')
    )
    op.create_index('geostore_gfw_geostore_id_idx', 'geostore', ['gfw_geostore_id'], unique=False, postgresql_using='hash')
    op.create_table('versions',
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('dataset', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('is_latest', sa.Boolean(), nullable=True),
    sa.Column('source_type', sa.String(), nullable=False),
    sa.Column('has_vector_tile_cache', sa.Boolean(), nullable=True),
    sa.Column('has_raster_tile_cache', sa.Boolean(), nullable=True),
    sa.Column('has_geostore', sa.Boolean(), nullable=True),
    sa.Column('has_feature_info', sa.Boolean(), nullable=True),
    sa.Column('has_10_40000_tiles', sa.Boolean(), nullable=True),
    sa.Column('has_90_27008_tiles', sa.Boolean(), nullable=True),
    sa.Column('has_90_9876_tiles', sa.Boolean(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['dataset'], ['datasets.dataset'], name='fk'),
    sa.PrimaryKeyConstraint('dataset', 'version')
    )
    op.create_table('assets',
    sa.Column('created_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_on', sa.DateTime(), server_default=sa.text('now()'), nullable=True),
    sa.Column('dataset', sa.String(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('asset_type', sa.String(), nullable=False),
    sa.Column('asset_uri', sa.String(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['dataset', 'version'], ['versions.dataset', 'versions.version'], name='fk'),
    sa.PrimaryKeyConstraint('dataset', 'version', 'asset_type')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('assets')
    op.drop_table('versions')
    op.drop_index('geostore_gfw_geostore_id_idx', table_name='geostore')
    op.drop_table('geostore')
    op.drop_table('datasets')
    # ### end Alembic commands ###
