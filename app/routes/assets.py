from typing import Optional, List
from uuid import UUID

from fastapi import APIRouter, Depends, Path
from fastapi.responses import ORJSONResponse

from app.models.pydantic.asset import Asset, AssetCreateIn
from app.routes import dataset_dependency, version_dependency

router = APIRouter()


@router.get(
    "/{dataset}/{version}/assets", response_class=ORJSONResponse, tags=["Assets"], response_model=List[Asset]
)
async def get_assets(*,
                    dataset: str = Depends(dataset_dependency),
                    version: str = Depends(version_dependency)):
    """
    Get all assets for a given dataset version
    """
    pass


@router.get(
    "/{dataset}/{version}/assets/{asset_id}", response_class=ORJSONResponse, tags=["Assets"], response_model=Asset
)
async def get_asset(*,
                    dataset: str = Depends(dataset_dependency),
                    version: str = Depends(version_dependency),
                    asset_id: UUID = Path(...)):
    """
    Get a specific asset
    """
    pass


@router.get("assets", response_class=ORJSONResponse, tags=["Assets"], response_model=List[Asset])
async def get_assets(*,
                    asset_id: UUID = Path(...)):
    """
    Get a specific asset
    """
    pass


@router.get("assets/{asset_id}", response_class=ORJSONResponse, tags=["Assets"], response_model=Asset)
async def get_asset(*,
                    asset_id: UUID = Path(...)):
    """
    Get a specific asset
    """
    pass


@router.post(
    "/{dataset}/{version}/assets", response_class=ORJSONResponse, tags=["Assets"], response_model=Asset
)
async def add_new_asset(*,
                     dataset: str = Depends(dataset_dependency),
                     version: str = Depends(version_dependency),
                     request: Optional[AssetCreateIn], ):
    """
    Add a new asset to a dataset version. Managed assets will be generated by the API itself.
    In that case, the Asset URI is read only and will be set automatically.

    If the asset is not managed, you need to specify an Asset URI to link to.
    """
    pass


@router.delete(
    "/{dataset}/{version}/assets/{asset_id}", response_class=ORJSONResponse, tags=["Assets"], response_model=Asset
)
async def delete_asset(*,
                     dataset: str = Depends(dataset_dependency),
                     version: str = Depends(version_dependency),
                     asset_id: UUID = Path(...) ):
    """
    Delete selected asset.
    For managed assets, all resources will be deleted. For non-managed assets, only the link will be deleted.
    """
    pass
